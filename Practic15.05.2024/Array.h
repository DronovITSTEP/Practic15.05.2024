#pragma once
#include <iostream>

using namespace std;

/*
Задание 1
Создать шаблонный класс-контейнер Array, который представляет собой массив,
позволяющий хранить объекты заданного типа.
Класс должен реализовывать следующие функции:
■ GetSize – получение размера массива (количество элементов,
под которые выделена память);
■ SetSize(int size, int grow = 1) – установка размера массива
(если параметр size больше предыдущего размера массива, то
выделяется дополнительный блок памяти, если нет, то «лишние»
элементы теряются и память освобождается); параметр
grow определяет для какого количества элементов необходимо выделить память,
если количество элементов превосходит
текущий размер массива. Например, SetSize(5, 5); означает,
что при добавлении 6-го элемента размер массива становится
равным 10, при добавлении 11-го - 15 и т. д.;
■ GetUpperBound - получение последнего допустимого индекса в массиве.
Например, если при размере массива 10, вы добавляете в него 4 элемента, то функция вернет 3;
■ IsEmpty - массив пуст?;
■ FreeExtra - удалить «лишнюю» память (выше последнего допустимого индекса);
■ RemoveAll – удалить все;
■ GetAt-получение определенного элемента (по индексу);
■ SetAt – установка нового значения для определенного элемента
(индекс элемента должен быть меньше текущего размера
массива);
■ operator [] – для реализации двух предыдущих функций;
■ Add – добавление элемента в массив (при необходимости
массив увеличивается на значение grow функции SetSize);
■ Append – «сложение» двух массивов;
■ operator =;
■ GetData – получения адреса массива с данными;
■ InsertAt – вставка элемента(-ов) в заданную позицию;
■ RemoveAt – удаление элемента(-ов) с заданной позиции
*/

template<class T>
class Array
{
	int size;
	int grow;
	int lastIndex;
	T* arr;
public:
	Array() :size{ 0 }, arr{ nullptr }, grow{ 1 }, lastIndex{ -1 } {}
	/// <summary>
	/// получение размера массива(количество элементов,
	///	под которые выделена память);
	/// </summary>	
	int GetSize();
	/// <summary>
	/// установка размера массива
	/// (если параметр size больше предыдущего размера массива, то
	/// выделяется дополнительный блок памяти, если нет, то «лишние»
	/// элементы теряются и память освобождается); 
	/// параметр grow определяет для какого количества элементов необходимо 
	/// выделить память, если количество элементов превосходит
	/// текущий размер массива.Например, SetSize(5, 5) - означает,
	/// что при добавлении 6 - го элемента размер массива становится
	/// равным 10, при добавлении 11 - го - 15 и т.д.;
	/// </summary>
	/// <param name="size">размер массива</param>
	/// <param name="grow">размер увеличения массива при его заполнении</param>
	void SetSize(int size, int grow = 1); 
	/// <summary>
	///  получение последнего допустимого индекса в массиве.
	/// Например, если при размере массива 10, вы добавляете 
	/// в него 4 элемента, то функция вернет 3;
	/// </summary>
	/// <returns>последний допустимый индекс в массиве</returns>
	int GetUpperBound();
	/// <summary>
	/// массив пуст?
	/// </summary>
	/// <returns>true: массив пустой, иначе false</returns>
	bool IsEmpty();
	/// <summary>
	/// удалить «лишнюю» память(выше последнего допустимого индекса)
	/// </summary>
	void FreeExtra();
	/// <summary>
	/// удалить все;
	/// </summary>
	void RemoveAll();
	/// <summary>
	/// получение определенного элемента(по индексу)
	/// </summary>
	/// <param name="index">индекс</param>
	/// <returns>элемент по индексу</returns>
	T& GetAt(int index);
	/// <summary>
	/// установка нового значения для определенного элемента
	/// (индекс элемента должен быть меньше текущего размера
	///	массива);
	/// </summary>
	/// <param name="index">индекс</param>
	/// <param name="elem">элемент</param>
	void SetAt(int index, T elem); 
	/// <summary>
	/// для реализации двух предыдущих функций;
	/// </summary>
	/// <param name="index">индекс</param>
	/// <returns>элемент</returns>
	T& operator [](int index);
	/// <summary>
	/// добавление элемента в массив(при необходимости
	/// массив увеличивается на значение grow функции SetSize);
	/// </summary>
	/// <param name="elem">эелемент</param>
	void Add(T elem);
	/// <summary>
	/// «сложение» двух массивов;
	/// </summary>
	/// <param name="arr">массив друго объекта класса</param>
	Array& Append(const Array& obj);
	Array& operator=(const Array& obj);
	/// <summary>
	/// получения адреса массива с данными;
	/// </summary>
	/// <returns></returns>
	T& GetData(); 
	/// <summary>
	/// вставка элемента(-ов) в заданную позицию;
	/// </summary>
	/// <param name="index">индекс</param>
	/// <param name="elems">элемент(-ы)</param>
	/// <param name="size">размер</param>
	void InsertAt(int index, T* elems, int size = 1);
	/// <summary>
	/// удаление элемента(-ов) с заданной позиции
	/// </summary>
	/// <param name="index">индекс</param>
	/// <param name="elems">элемент(-ы)</param>
	/// <param name="size">размер</param>
	void RemoveAt(int index,  int count = 1); 
};

